version: '3.8'

services:
  # MySQL Database
  database:
    image: mysql:8.0
    container_name: rbarros-database
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpassword}
      MYSQL_DATABASE: ${DB_NAME:-rbarros_db}
      MYSQL_USER: ${DB_USER:-rbarros_user}
      MYSQL_PASSWORD: ${DB_PASSWORD:-rbarros_password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - rbarros-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Backend API
  backend:
    build:
      context: ./rbarros-backend
      dockerfile: Dockerfile
    container_name: rbarros-backend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=${PORT:-3000}
      - DB_HOST=${DB_HOST:-database}
      - DB_USER=${DB_USER:-rbarros_user}
      - DB_PASSWORD=${DB_PASSWORD:-rbarros_password}
      - DB_NAME=${DB_NAME:-rbarros_db}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - SECRET_KEY_REFRESH_TOKEN=${SECRET_KEY_REFRESH_TOKEN:-your-refresh-secret-key-here}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY:-your-sendgrid-api-key}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET:-your-webhook-secret}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - rbarros-network
    volumes:
      - ./rbarros-backend:/app
      - /app/node_modules

  # Frontend Application
  frontend:
    build:
      context: ./rbarros-frontend
      dockerfile: Dockerfile
    container_name: rbarros-frontend
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      - VUE_APP_API_URL=${VUE_APP_API_URL:-http://localhost:3000}
    depends_on:
      - backend
    networks:
      - rbarros-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: rbarros-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - rbarros-network

volumes:
  mysql_data:
    driver: local

networks:
  rbarros-network:
    driver: bridge
