services:
  # MySQL Database (inherits from dev, no changes needed)
  database:
    image: mysql:8.0
    container_name: rbarros-database
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./rbarros-backend/database/init:/docker-entrypoint-initdb.d
    networks:
      - rbarros-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Backend API (Production)
  backend:
    build:
      context: ./rbarros-backend
      dockerfile: Dockerfile  # Use production Dockerfile
    container_name: rbarros-backend-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=database
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - SECRET_KEY=${SECRET_KEY}
      - SECRET_KEY_REFRESH_TOKEN=${SECRET_KEY_REFRESH_TOKEN}
      - SENDGRID_API_KEY=${SENDGRID_API_KEY}
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
    depends_on:
      database:
        condition: service_healthy
    networks:
      - rbarros-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      start_period: 60s
      retries: 3

  # Frontend Application (Production)
  frontend:
    build:
      context: ./rbarros-frontend
      dockerfile: Dockerfile  # Use production Dockerfile
      args:
        - VUE_APP_API_URL=${VUE_APP_API_URL}
    container_name: rbarros-frontend-prod
    restart: unless-stopped
    ports:
      - "8080:80"  # Production port mapping (nginx serves on port 80)
    depends_on:
      - backend
    networks:
      - rbarros-network

  # Nginx Reverse Proxy (same as dev)
  nginx:
    image: nginx:alpine
    container_name: rbarros-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - rbarros-network

volumes:
  mysql_data:
    driver: local

networks:
  rbarros-network:
    driver: bridge 